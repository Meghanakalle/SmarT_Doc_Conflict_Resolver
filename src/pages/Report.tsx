import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Sidebar } from '@/components/Sidebar';
import { ConflictCard } from '@/components/ConflictCard';
import { 
  Download, 
  FileText, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  Share,
  ArrowLeft
} from 'lucide-react';
import { getReportById, updateReport } from '@/lib/storage';
import { Report as ReportType, Conflict } from '@/types';

export default function Report() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [report, setReport] = useState<ReportType | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!id) {
      navigate('/reports');
      return;
    }

    const foundReport = getReportById(id);
    if (!foundReport) {
      navigate('/reports');
      return;
    }

    setReport(foundReport);
    setLoading(false);
  }, [id, navigate]);

  const handleConflictStatusChange = (conflictId: string, status: Conflict['status'], notes?: string) => {
    if (!report) return;

    const updatedConflicts = report.conflicts.map(conflict => 
      conflict.id === conflictId 
        ? { ...conflict, status, notes }
        : conflict
    );

    const updatedReport: ReportType = {
      ...report,
      conflicts: updatedConflicts,
      status: updatedConflicts.every(c => c.status !== 'open') ? 'resolved' : 'needs_review'
    };

    updateReport(report.id, updatedReport);
    setReport(updatedReport);
  };

  const handleDownloadReport = () => {
    if (!report) return;

    const reportContent = `
SMART DOC CHECKER AGENT - CONFLICT ANALYSIS REPORT
=================================================

Report ID: ${report.id}
Generated: ${new Date(report.createdAt).toLocaleString()}
Status: ${report.status.toUpperCase()}

DOCUMENTS ANALYZED:
${report.documents.map(doc => `- ${doc.name} (${(doc.size / 1024).toFixed(1)} KB)`).join('\n')}

SUMMARY:
- Total Conflicts Found: ${report.totalConflicts}
- High Severity: ${report.conflicts.filter(c => c.severity === 'high').length}
- Medium Severity: ${report.conflicts.filter(c => c.severity === 'medium').length}
- Low Severity: ${report.conflicts.filter(c => c.severity === 'low').length}

DETAILED CONFLICTS:
${report.conflicts.map((conflict, index) => `
${index + 1}. ${conflict.title}
   Type: ${conflict.type.toUpperCase()}
   Severity: ${conflict.severity.toUpperCase()}
   Status: ${conflict.status.toUpperCase()}
   
   Description: ${conflict.description}
   
   Source 1: ${conflict.documents.source1.name}${conflict.documents.source1.page ? ` (Page ${conflict.documents.source1.page})` : ''}
   Text: "${conflict.documents.source1.text}"
   
   Source 2: ${conflict.documents.source2.name}${conflict.documents.source2.page ? ` (Page ${conflict.documents.source2.page})` : ''}
   Text: "${conflict.documents.source2.text}"
   
   Recommendation: ${conflict.suggestion}
   ${conflict.notes ? `Notes: ${conflict.notes}` : ''}
`).join('\n')}

---
Generated by Smart Doc Checker Agent
Professional document conflict analysis system
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `conflict-report-${report.id}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'default';
      case 'needs_review': return 'destructive';
      case 'resolved': return 'secondary';
      default: return 'default';
    }
  };

  const getSeverityStats = () => {
    if (!report) return { high: 0, medium: 0, low: 0 };
    return {
      high: report.conflicts.filter(c => c.severity === 'high').length,
      medium: report.conflicts.filter(c => c.severity === 'medium').length,
      low: report.conflicts.filter(c => c.severity === 'low').length
    };
  };

  if (loading) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <div className="flex-1 p-6 flex items-center justify-center">
          <div className="text-center">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">Loading report...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <div className="flex-1 p-6 flex items-center justify-center">
          <div className="text-center">
            <AlertTriangle className="w-12 h-12 text-red-400 mx-auto mb-4" />
            <p className="text-gray-500">Report not found</p>
            <Button onClick={() => navigate('/reports')} className="mt-4">
              Back to Reports
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const severityStats = getSeverityStats();

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      
      <div className="flex-1 p-6">
        <div className="max-w-6xl mx-auto space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="outline" size="sm" onClick={() => navigate('/reports')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Conflict Analysis Report
                </h1>
                <p className="text-gray-600">Report #{report.id.slice(-8)}</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="outline" onClick={handleDownloadReport}>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </Button>
              <Button variant="outline">
                <Share className="w-4 h-4 mr-2" />
                Share
              </Button>
            </div>
          </div>

          {/* Summary Card */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center space-x-2">
                    <FileText className="w-5 h-5" />
                    <span>Analysis Summary</span>
                  </CardTitle>
                  <CardDescription>
                    Generated on {new Date(report.createdAt).toLocaleString()}
                  </CardDescription>
                </div>
                <Badge variant={getStatusColor(report.status)} className="text-sm">
                  {report.status.replace('_', ' ').toUpperCase()}
                </Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">{report.totalConflicts}</div>
                  <p className="text-sm text-gray-600">Total Conflicts</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">{severityStats.high}</div>
                  <p className="text-sm text-gray-600">High Severity</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">{severityStats.medium}</div>
                  <p className="text-sm text-gray-600">Medium Severity</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-600">{severityStats.low}</div>
                  <p className="text-sm text-gray-600">Low Severity</p>
                </div>
              </div>

              <div className="mt-6 pt-6 border-t">
                <h4 className="font-medium text-gray-900 mb-3">Documents Analyzed</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {report.documents.map((doc) => (
                    <div key={doc.id} className="flex items-center space-x-2 p-2 bg-gray-50 rounded">
                      <FileText className="w-4 h-4 text-gray-400" />
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-900 truncate">{doc.name}</p>
                        <p className="text-xs text-gray-500">{(doc.size / 1024).toFixed(1)} KB</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Conflicts */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">
                Detected Conflicts ({report.conflicts.length})
              </h2>
              {report.conflicts.length > 0 && (
                <div className="flex items-center space-x-2 text-sm text-gray-600">
                  <Clock className="w-4 h-4" />
                  <span>Click on conflicts to view details and take action</span>
                </div>
              )}
            </div>

            {report.conflicts.length === 0 ? (
              <Card>
                <CardContent className="text-center py-12">
                  <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No Conflicts Detected
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Great! Your documents appear to be consistent with no contradictions or overlaps found.
                  </p>
                  <Button onClick={() => navigate('/dashboard')}>
                    Return to Dashboard
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-4">
                {report.conflicts.map((conflict) => (
                  <ConflictCard
                    key={conflict.id}
                    conflict={conflict}
                    onStatusChange={handleConflictStatusChange}
                  />
                ))}
              </div>
            )}
          </div>

          {/* Action Recommendations */}
          {report.conflicts.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <AlertTriangle className="w-5 h-5 text-orange-500" />
                  <span>Next Steps</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <strong>High Priority:</strong> Address all high-severity conflicts first as they may cause significant operational issues.
                    </AlertDescription>
                  </Alert>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div className="space-y-2">
                      <h4 className="font-medium text-gray-900">Immediate Actions</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>• Review all high-severity conflicts</li>
                        <li>• Update conflicting documents</li>
                        <li>• Notify relevant stakeholders</li>
                        <li>• Implement standardized policies</li>
                      </ul>
                    </div>
                    <div className="space-y-2">
                      <h4 className="font-medium text-gray-900">Long-term Solutions</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>• Create centralized policy repository</li>
                        <li>• Establish document review process</li>
                        <li>• Set up regular conflict monitoring</li>
                        <li>• Train team on consistency standards</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}